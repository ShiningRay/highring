/** Declaration file generated by dts-gen */

declare class swim {
    constructor(opts: swim.SwimOptions);

    bootstrap(hosts: any, callback: (err:Error) => any): void;

    checksum(): any;

    join(hosts: any, callback: (err:Error) => any): any;

    leave(): void;

    localhost(): any;

    members(hasLocal: any): any;

    whoami(): any;

    static Default: {
        joinTimeout: number;
    };

    on(event: swim.EventType.Change, listener: (event: swim.MemberData) => any )
    on(event: swim.EventType.Error, listener: (err: Error) => any  )
}

declare namespace swim {
    interface SwimOptions {
        codec: string;
        disseminationFactor: number;
        local: {
            /**
             * "(Address):(port)"
             */
            host: string;
            port: number;
        }
        interval: number;
        pingTimeout: number;
        pingReqTimeout: number;
        pingReqGroupSize: number;
        suspectTimeout: number;
        joinTimeout: number;
        udp: {
            type: string;
            maxDgramSize: number;
        }
    }
    interface MemberData {
        pid: number;
        hostname: string;
        level: number;
        time: number;
        msg: string;
        /**
         * in "{host}:{port}" format;
         */
        host: string;
        state: Member.State;
        incarnation: number;
        v: number;
        meta?: any;
    }
    namespace Member {
        enum State {
            Alive,
            Suspect,
            Faulty
        }
    }
    namespace Error {
        class InvalidStateError extends global.Error{
            constructor(meta: any);
        }

        class JoinFailedError extends global.Error{
            constructor(meta: any);
        }

        class ListenFailedError extends global.Error{
            constructor(meta: any);
        }
    }

    export namespace EventType {
        export type Change= 'change'
        export const Change='change'
        export type Update= 'update'
        export const Update= 'update'
        export type Error= 'error'
        export const Error= 'error'
        export type Ready= 'ready'
        export const Ready= 'ready'
    }


    namespace State {
        const Started: string;
        const Stopped: string;
    }
}

declare module "swim" {
    export = swim;
}
